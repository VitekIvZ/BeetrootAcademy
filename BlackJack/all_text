import random

class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        self.points = self._calculate_points()

    def _calculate_points(self):
        if self.rank in ['J', 'Q', 'K']:
            return 10
        elif self.rank == 'A':
            return 11
        else:
            return int(self.rank)

    def __str__(self):
        return f"{self.rank}{self.suit}"

class DeckOfCards:
    def __init__(self):
        ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        suits = ['♠', '♣', '♦', '♥']
        self.cards = [Card(rank, suit) for suit in suits for rank in ranks]
        random.shuffle(self.cards)

    def draw_card(self):
        return self.cards.pop()

class Hand:
    def __init__(self):
        self.cards = []

    def add_card(self, card):
        self.cards.append(card)

    def get_points(self):
        points = sum(card.points for card in self.cards)
        aces = sum(1 for card in self.cards if card.rank == 'A')
        while points > 21 and aces:
            points -= 10
            aces -= 1
        return points

    def has_blackjack(self):
        return len(self.cards) == 2 and self.get_points() == 21

    def __str__(self):
        return ", ".join(str(card) for card in self.cards)

class Player:
    def __init__(self, name):
        self.name = name
        self.hand = Hand()
        self.bet = Bet()

    def place_bet(self, amount):
        return self.bet.place(amount)

    def win_bet(self):
        self.bet.win()

    def lose_bet(self):
        self.bet.lose()

    def surrender_bet(self):
        self.bet.surrender()

class Bet:
    def __init__(self):
        self.balance = 1000

    def place(self, amount):
        if amount > self.balance:
            print("Not enough balance to place this bet.")
            return False
        self.balance -= amount
        return True

    def win(self):
        self.balance += self.current_bet * 2

    def lose(self):
        self.current_bet = 0

    def surrender(self):
        self.balance += self.current_bet // 2
        self.current_bet = 0

class BlackJackGame:
    def __init__(self):
        self.deck = DeckOfCards()
        self.player = None
        self.dealer = Player("Dealer")

    def start_game(self):
        player_name = input("Enter your name: ")
        self.player = Player(player_name)
        print(f"Welcome to BlackJack, {self.player.name}!")
        
        while True:
            self._play_round()
            if self.player.bet.balance == 0:
                print("You have run out of balance. Game over.")
                return
            if input("Do you want to play another round? (y/n): ").lower() != 'y':
                print("Thank you for playing! Goodbye.")
                return

    def _play_round(self):
        print(f"Your current balance is: {self.player.bet.balance}")
        self._place_bet()
        self._deal_initial_cards()
        self._show_initial_hands()

        if self._check_blackjack():
            return

        self._player_turn()
        if self.player.hand.get_points() > 21:
            return

        self._dealer_turn()
        self._determine_winner()

    def _place_bet(self):
        while True:
            try:
                bet_amount = int(input("Place your bet: "))
                if self.player.place_bet(bet_amount):
                    break
            except ValueError:
                print("Invalid input. Please enter a number.")

    def _deal_initial_cards(self):
        for _ in range(2):
            self.player.hand.add_card(self.deck.draw_card())
            self.dealer.hand.add_card(self.deck.draw_card())

    def _show_initial_hands(self):
        print(f"Dealer's hand: {self.dealer.hand.cards[0]}, ?")
        print(f"Your hand: {self.player.hand} (Points: {self.player.hand.get_points()})")

    def _check_blackjack(self):
        if self.player.hand.has_blackjack():
            print("Blackjack! You win!")
            self.player.win_bet()
            return True
        elif self.dealer.hand.has_blackjack():
            print(f"Dealer's hand: {self.dealer.hand} (Points: {self.dealer.hand.get_points()})")
            print("Dealer has Blackjack! Dealer wins!")
            self.player.lose_bet()
            return True
        return False

    def _player_turn(self):
        while True:
            action = input("Do you want to [h]it, [s]tand, or su[r]render? ").lower()
            if action == 'h':
                self.player.hand.add_card(self.deck.draw_card())
                print(f"Your hand: {self.player.hand} (Points: {self.player.hand.get_points()})")
                if self.player.hand.get_points() > 21:
                    print("You busted! Dealer wins.")
                    self.player.lose_bet()
                    return
            elif action == 's':
                break
            elif action == 'r':
                print("You have chosen to surrender. You lose half your bet.")
                self.player.surrender_bet()
                return
            else:
                print("Invalid choice. Please enter 'h', 's', or 'r'.")

    def _dealer_turn(self):
        print(f"Dealer's hand: {self.dealer.hand} (Points: {self.dealer.hand.get_points()})")
        while self.dealer.hand.get_points() < 17:
            self.dealer.hand.add_card(self.deck.draw_card())
            print(f"Dealer's hand: {self.dealer.hand} (Points: {self.dealer.hand.get_points()})")

    def _determine_winner(self):
        player_points = self.player.hand.get_points()
        dealer_points = self.dealer.hand.get_points()

        if dealer_points > 21 or player_points > dealer_points:
            print("You win!")
            self.player.win_bet()
        elif player_points <= dealer_points:
            print("Dealer wins!")
            self.player.lose_bet()

        print(f"Your current balance is: {self.player.bet.balance}")

if __name__ == "__main__":
    game = BlackJackGame()
    game.start_game()
